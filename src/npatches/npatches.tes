#version 330 core
layout(quads, equal_spacing, ccw) in;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

vec3 interpolate(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)
{
    vec3 a = mix(p0, p1, t);
    vec3 b = mix(p1, p2, t);
    vec3 c = mix(p2, p3, t);
    vec3 d = mix(a, b, t);
    vec3 e = mix(b, c, t);
    return mix(d, e, t);
}

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec3 p0 = interpolate(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz, gl_in[3].gl_Position.xyz, u);
    vec3 p1 = interpolate(gl_in[4].gl_Position.xyz, gl_in[5].gl_Position.xyz, gl_in[6].gl_Position.xyz, gl_in[7].gl_Position.xyz, u);
    vec3 p2 = interpolate(gl_in[8].gl_Position.xyz, gl_in[9].gl_Position.xyz, gl_in[10].gl_Position.xyz, gl_in[11].gl_Position.xyz, u);
    vec3 p3 = interpolate(gl_in[12].gl_Position.xyz, gl_in[13].gl_Position.xyz, gl_in[14].gl_Position.xyz, gl_in[15].gl_Position.xyz, u);

    vec3 position = interpolate(p0, p1, p2, p3, v);

    gl_Position = projection * view * model * vec4(position, 1.0);
}